<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Film Festival Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .nav-tabs {
            display: flex;
            background: #34495e;
            padding: 0;
            flex-wrap: wrap;
        }

        .nav-tab {
            padding: 15px 20px;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            flex: 1;
            min-width: 120px;
        }

        .nav-tab:hover {
            background: #2c3e50;
        }

        .nav-tab.active {
            background: #e74c3c;
        }

        .tab-content {
            display: none;
            padding: 30px;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .section-title {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8em;
            border-bottom: 3px solid #e74c3c;
            padding-bottom: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }

        th {
            background: #34495e;
            color: white;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.9em;
            letter-spacing: 1px;
        }

        tr:hover {
            background: #f8f9fa;
            transform: scale(1.01);
            transition: all 0.2s ease;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            font-size: 1.2em;
        }

        .error {
            background: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }

        .movie-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin: 15px 0;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 5px solid #e74c3c;
        }

        .movie-title {
            font-size: 1.4em;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .movie-details {
            color: #7f8c8d;
            margin-bottom: 10px;
        }

        .cast-list, .screening-list, .award-list {
            margin-top: 15px;
        }

        .cast-item, .screening-item, .award-item {
            background: #ecf0f1;
            padding: 8px 12px;
            margin: 5px 0;
            border-radius: 5px;
            display: inline-block;
            margin-right: 10px;
        }

        .lead-role {
            background: #e74c3c;
            color: white;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 25px;
            border-radius: 10px;
            text-align: center;
        }

        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .positive-roi {
            color: #27ae60;
            font-weight: bold;
        }

        .negative-roi {
            color: #e74c3c;
            font-weight: bold;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #2c3e50;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 10px;
            border: 2px solid #ecf0f1;
            border-radius: 5px;
            font-size: 16px;
        }

        .form-group input:focus, .form-group select:focus {
            border-color: #3498db;
            outline: none;
        }

        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s ease;
        }

        .btn:hover {
            background: #2980b9;
        }

        .btn-success {
            background: #27ae60;
        }

        .btn-success:hover {
            background: #219a52;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            overflow-y: auto;
        }

        .modal-content {
            background: white;
            margin: 50px auto;
            padding: 30px;
            border-radius: 15px;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #7f8c8d;
        }

        .close:hover {
            color: #e74c3c;
        }

        .audit-log {
            background: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
        }

        .audit-action {
            font-weight: bold;
            color: #2c3e50;
        }

        .audit-table {
            background: #2c3e50;
        }

        .audit-table INSERT {
            background: #27ae60;
        }

        .audit-table UPDATE {
            background: #f39c12;
        }

        .audit-table DELETE {
            background: #e74c3c;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üé¨ Advanced Film Festival Management</h1>
            <div class="subtitle">Complete Database System with Triggers, Views & Advanced Features</div>
        </header>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('dashboard')">Dashboard</button>
            <button class="nav-tab" onclick="showTab('movies')">Movies</button>
            <button class="nav-tab" onclick="showTab('awards')">Awards</button>
            <button class="nav-tab" onclick="showTab('festivals')">Festivals</button>
            <button class="nav-tab" onclick="showTab('actors')">Actors</button>
            <button class="nav-tab" onclick="showTab('views')">Database Views</button>
            <button class="nav-tab" onclick="showTab('audit')">Audit Logs</button>
            <button class="nav-tab" onclick="showTab('add-data')">Add Data</button>
        </div>

        <div id="dashboard" class="tab-content active">
            <h2 class="section-title">üìä System Dashboard</h2>
            <div class="stats-grid" id="dashboard-stats">
                <div class="loading">Loading dashboard statistics...</div>
            </div>
            
            <h3>Recent Activity</h3>
            <div id="recent-activity">
                <div class="loading">Loading recent activity...</div>
            </div>
        </div>

        <div id="movies" class="tab-content">
            <h2 class="section-title">üé• Movies Database</h2>
            <div id="movies-content">
                <div class="loading">Loading movies...</div>
            </div>
        </div>

        <div id="awards" class="tab-content">
            <h2 class="section-title">üèÜ Awards & Recognitions</h2>
            <div id="awards-content">
                <div class="loading">Loading awards...</div>
            </div>
        </div>

        <div id="festivals" class="tab-content">
            <h2 class="section-title">üé™ Film Festivals</h2>
            <div id="festivals-content">
                <div class="loading">Loading festivals...</div>
            </div>
        </div>

        <div id="actors" class="tab-content">
            <h2 class="section-title">üé≠ Actors Statistics</h2>
            <div id="actors-content">
                <div class="loading">Loading actor statistics...</div>
            </div>
        </div>

        <div id="views" class="tab-content">
            <h2 class="section-title">üìä Database Views</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="movie-count">0</div>
                    <div class="stat-label">Total Movies</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="award-count">0</div>
                    <div class="stat-label">Awards Given</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="festival-count">0</div>
                    <div class="stat-label">Festivals</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="actor-count">0</div>
                    <div class="stat-label">Actors</div>
                </div>
            </div>
            
            <h3>Movie Details View</h3>
            <div id="movie-details-view">
                <div class="loading">Loading movie details view...</div>
            </div>

            <h3>Festival Statistics View</h3>
            <div id="festival-statistics-view">
                <div class="loading">Loading festival statistics...</div>
            </div>
        </div>

        <div id="audit" class="tab-content">
            <h2 class="section-title">üìù System Audit Logs</h2>
            <div id="audit-content">
                <div class="loading">Loading audit logs...</div>
            </div>
        </div>

        <div id="add-data" class="tab-content">
            <h2 class="section-title">‚ûï Add New Data</h2>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                <div>
                    <h3>Add New Movie</h3>
                    <form id="add-movie-form">
                        <div class="form-group">
                            <label>Title:</label>
                            <input type="text" id="movie-title" required>
                        </div>
                        <div class="form-group">
                            <label>Genre:</label>
                            <select id="movie-genre" required>
                                <option value="">Select Genre</option>
                                <option value="Drama">Drama</option>
                                <option value="Comedy">Comedy</option>
                                <option value="Action">Action</option>
                                <option value="Thriller">Thriller</option>
                                <option value="Romance">Romance</option>
                                <option value="Horror">Horror</option>
                                <option value="Sci-Fi">Sci-Fi</option>
                                <option value="Documentary">Documentary</option>
                                <option value="Animation">Animation</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Release Year:</label>
                            <input type="number" id="movie-year" min="1900" max="2030" required>
                        </div>
                        <div class="form-group">
                            <label>Duration (minutes):</label>
                            <input type="number" id="movie-duration" min="1" max="500" required>
                        </div>
                        <div class="form-group">
                            <label>Budget ($):</label>
                            <input type="number" id="movie-budget" min="0" step="1000000">
                        </div>
                        <button type="submit" class="btn btn-success">Add Movie</button>
                    </form>
                </div>
                
                <div>
                    <h3>Add Actor to Movie</h3>
                    <form id="add-cast-form">
                        <div class="form-group">
                            <label>Movie:</label>
                            <select id="cast-movie" required>
                                <option value="">Select Movie</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Actor Name:</label>
                            <input type="text" id="actor-name" required>
                        </div>
                        <div class="form-group">
                            <label>Role:</label>
                            <input type="text" id="actor-role" required>
                        </div>
                        <div class="form-group">
                            <label>Salary ($):</label>
                            <input type="number" id="actor-salary" min="0" step="1000">
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="is-lead"> Lead Role
                            </label>
                        </div>
                        <button type="submit" class="btn btn-success">Add to Cast</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for movie details -->
    <div id="movieModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('movieModal')">&times;</span>
            <div id="movie-modal-content"></div>
        </div>
    </div>

    <script>
        const API_BASE = 'http://localhost:5000/api';

        // Tab navigation
        function showTab(tabName) {
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            event.target.classList.add('active');
            document.getElementById(tabName).classList.add('active');
            
            // Load data when tab is shown
            if (tabName === 'dashboard') loadDashboard();
            else if (tabName === 'movies') loadMovies();
            else if (tabName === 'awards') loadAwards();
            else if (tabName === 'festivals') loadFestivals();
            else if (tabName === 'actors') loadActors();
            else if (tabName === 'views') loadViews();
            else if (tabName === 'audit') loadAuditLogs();
            else if (tabName === 'add-data') loadAddDataForms();
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Load dashboard with statistics
        async function loadDashboard() {
            try {
                const [movies, awards, festivals, actors, auditLogs] = await Promise.all([
                    fetch(`${API_BASE}/movies`).then(r => r.json()),
                    fetch(`${API_BASE}/awards`).then(r => r.json()),
                    fetch(`${API_BASE}/views/festival-statistics`).then(r => r.json()),
                    fetch(`${API_BASE}/views/actor-statistics`).then(r => r.json()),
                    fetch(`${API_BASE}/audit-logs`).then(r => r.json())
                ]);

                // Update statistics
                document.getElementById('dashboard-stats').innerHTML = `
                    <div class="stat-card">
                        <div class="stat-number">${movies.length}</div>
                        <div class="stat-label">Total Movies</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${awards.length}</div>
                        <div class="stat-label">Awards Given</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${festivals.length}</div>
                        <div class="stat-label">Active Festivals</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${actors.length}</div>
                        <div class="stat-label">Registered Actors</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${auditLogs.length}</div>
                        <div class="stat-label">System Events</div>
                    </div>
                `;

                // Show recent activity
                const recentActivity = auditLogs.slice(0, 10);
                document.getElementById('recent-activity').innerHTML = recentActivity.map(log => `
                    <div class="audit-log">
                        <div class="audit-action ${log.Action_Type}">${log.Action_Type} on ${log.Table_Name}</div>
                        <div>Record ID: ${log.Record_ID} | ${new Date(log.Changed_At).toLocaleString()}</div>
                        <div>Changed by: ${log.Changed_By}</div>
                    </div>
                `).join('');

            } catch (error) {
                document.getElementById('dashboard-stats').innerHTML = 
                document.getElementById('recent-activity').innerHTML = `
                    <div class="error">Error loading dashboard: ${error.message}</div>
                `;
            }
        }

        // Load movies with details
        async function loadMovies() {
            try {
                const response = await fetch(`${API_BASE}/movies`);
                const movies = await response.json();
                
                const content = document.getElementById('movies-content');
                content.innerHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Genre</th>
                                <th>Year</th>
                                <th>Duration</th>
                                <th>Budget</th>
                                <th>Revenue</th>
                                <th>ROI</th>
                                <th>Status</th>
                                <th>Festival</th>
                                <th>Director</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${movies.map(movie => `
                                <tr>
                                    <td><strong>${movie.Title}</strong></td>
                                    <td>${movie.Genre}</td>
                                    <td>${movie.Release_Year}</td>
                                    <td>${movie.Duration} min</td>
                                    <td>$${(movie.Budget / 1000000).toFixed(1)}M</td>
                                    <td>$${(movie.Revenue / 1000000).toFixed(1)}M</td>
                                    <td class="${movie.ROI_Percentage >= 0 ? 'positive-roi' : 'negative-roi'}">
                                        ${movie.ROI_Percentage ? movie.ROI_Percentage + '%' : 'N/A'}
                                    </td>
                                    <td>${movie.Status}</td>
                                    <td>${movie.Festival_Name || 'N/A'}</td>
                                    <td>${movie.Director_Name || 'N/A'}</td>
                                    <td>
                                        <button onclick="showMovieDetails(${movie.Movie_ID})" 
                                                class="btn" style="padding: 5px 10px; font-size: 12px;">
                                            Details
                                        </button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } catch (error) {
                document.getElementById('movies-content').innerHTML = `
                    <div class="error">Error loading movies: ${error.message}</div>
                `;
            }
        }

        // Load awards with complex joins
        async function loadAwards() {
            try {
                const response = await fetch(`${API_BASE}/awards`);
                const awards = await response.json();
                
                const content = document.getElementById('awards-content');
                content.innerHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>Award</th>
                                <th>Category</th>
                                <th>Year</th>
                                <th>Prize Money</th>
                                <th>Movie</th>
                                <th>Director</th>
                                <th>Actor</th>
                                <th>Festival</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${awards.map(award => `
                                <tr>
                                    <td><strong>${award.Award_Name}</strong></td>
                                    <td>${award.Category}</td>
                                    <td>${award.Year}</td>
                                    <td>$${award.Prize_Money ? award.Prize_Money.toLocaleString() : 'N/A'}</td>
                                    <td>${award.Movie_Title || 'N/A'}</td>
                                    <td>${award.Director_Name || 'N/A'}</td>
                                    <td>${award.Actor_Name || 'N/A'}</td>
                                    <td>${award.Festival_Name || 'N/A'}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } catch (error) {
                document.getElementById('awards-content').innerHTML = `
                    <div class="error">Error loading awards: ${error.message}</div>
                `;
            }
        }

        // Load festivals with movies and venues
        async function loadFestivals() {
            try {
                const response = await fetch(`${API_BASE}/views/festival-statistics`);
                const festivals = await response.json();
                
                let content = '';
                
                for (const festival of festivals) {
                    const festivalDetails = await fetch(`${API_BASE}/festivals/${festival.Festival_ID}`).then(r => r.json());
                    
                    content += `
                        <div class="movie-card">
                            <div class="movie-title">${festival.Festival_Name}</div>
                            <div class="movie-details">
                                <strong>Location:</strong> ${festival.Location} | 
                                <strong>Dates:</strong> ${new Date(festival.Start_Date).toLocaleDateString()} - ${new Date(festival.End_Date).toLocaleDateString()} | 
                                <strong>Movies:</strong> ${festival.Total_Movies} | 
                                <strong>Awards:</strong> ${festival.Total_Awards} |
                                <strong>Screenings:</strong> ${festival.Total_Screenings} |
                                <strong>Revenue:</strong> $${festival.Total_Revenue ? festival.Total_Revenue.toLocaleString() : '0'}
                            </div>
                            
                            <h4>Featured Movies:</h4>
                            <div class="cast-list">
                                ${festivalDetails.movies.map(movie => `
                                    <div class="cast-item">
                                        ${movie.Title} (${movie.Release_Year}) - ${movie.Director_Name} 
                                        - Budget: $${(movie.Budget / 1000000).toFixed(1)}M
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                }
                
                document.getElementById('festivals-content').innerHTML = content;
            } catch (error) {
                document.getElementById('festivals-content').innerHTML = `
                    <div class="error">Error loading festivals: ${error.message}</div>
                `;
            }
        }

        // Load actor statistics
        async function loadActors() {
            try {
                const response = await fetch(`${API_BASE}/views/actor-statistics`);
                const actors = await response.json();
                
                const content = document.getElementById('actors-content');
                content.innerHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>Actor Name</th>
                                <th>Gender</th>
                                <th>Nationality</th>
                                <th>Total Movies</th>
                                <th>Lead Roles</th>
                                <th>Avg Salary</th>
                                <th>Total Salary</th>
                                <th>Career Span</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${actors.map(actor => `
                                <tr>
                                    <td><strong>${actor.Actor_Name}</strong></td>
                                    <td>${actor.Gender}</td>
                                    <td>${actor.Nationality}</td>
                                    <td>${actor.Total_Movies}</td>
                                    <td>${actor.Lead_Roles}</td>
                                    <td>$${actor.Avg_Salary ? Math.round(actor.Avg_Salary).toLocaleString() : 'N/A'}</td>
                                    <td>$${actor.Total_Salary ? actor.Total_Salary.toLocaleString() : 'N/A'}</td>
                                    <td>${actor.First_Movie_Year || 'N/A'} - ${actor.Latest_Movie_Year || 'N/A'}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } catch (error) {
                document.getElementById('actors-content').innerHTML = `
                    <div class="error">Error loading actors: ${error.message}</div>
                `;
            }
        }

        // Load database views
        async function loadViews() {
            try {
                // Load movie details view
                const [movieViewData, festivalViewData, actorViewData, awardViewData] = await Promise.all([
                    fetch(`${API_BASE}/views/movie-details`).then(r => r.json()),
                    fetch(`${API_BASE}/views/festival-statistics`).then(r => r.json()),
                    fetch(`${API_BASE}/views/actor-statistics`).then(r => r.json()),
                    fetch(`${API_BASE}/views/award-winners`).then(r => r.json())
                ]);

                // Update stats
                document.getElementById('movie-count').textContent = movieViewData.length;
                document.getElementById('award-count').textContent = awardViewData.length;
                document.getElementById('festival-count').textContent = festivalViewData.length;
                document.getElementById('actor-count').textContent = actorViewData.length;

                // Movie details view
                document.getElementById('movie-details-view').innerHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Genre</th>
                                <th>Year</th>
                                <th>Duration</th>
                                <th>Budget</th>
                                <th>Revenue</th>
                                <th>ROI</th>
                                <th>Status</th>
                                <th>Festival</th>
                                <th>Director</th>
                                <th>Actors</th>
                                <th>Screenings</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${movieViewData.map(movie => `
                                <tr>
                                    <td>${movie.Title}</td>
                                    <td>${movie.Genre}</td>
                                    <td>${movie.Release_Year}</td>
                                    <td>${movie.Duration} min</td>
                                    <td>$${(movie.Budget / 1000000).toFixed(1)}M</td>
                                    <td>$${(movie.Revenue / 1000000).toFixed(1)}M</td>
                                    <td class="${movie.ROI_Percentage >= 0 ? 'positive-roi' : 'negative-roi'}">
                                        ${movie.ROI_Percentage ? movie.ROI_Percentage + '%' : 'N/A'}
                                    </td>
                                    <td>${movie.Status}</td>
                                    <td>${movie.Festival_Name || 'N/A'}</td>
                                    <td>${movie.Director_Name || 'N/A'}</td>
                                    <td>${movie.Actor_Count}</td>
                                    <td>${movie.Screening_Count}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

                // Festival statistics view
                document.getElementById('festival-statistics-view').innerHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>Festival</th>
                                <th>Location</th>
                                <th>Dates</th>
                                <th>Movies</th>
                                <th>Awards</th>
                                <th>Screenings</th>
                                <th>Tickets Sold</th>
                                <th>Revenue</th>
                                <th>Avg Budget</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${festivalViewData.map(festival => `
                                <tr>
                                    <td><strong>${festival.Festival_Name}</strong></td>
                                    <td>${festival.Location}</td>
                                    <td>${new Date(festival.Start_Date).toLocaleDateString()} - ${new Date(festival.End_Date).toLocaleDateString()}</td>
                                    <td>${festival.Total_Movies}</td>
                                    <td>${festival.Total_Awards}</td>
                                    <td>${festival.Total_Screenings}</td>
                                    <td>${festival.Total_Tickets_Sold || 0}</td>
                                    <td>$${festival.Total_Revenue ? festival.Total_Revenue.toLocaleString() : '0'}</td>
                                    <td>$${festival.Avg_Movie_Budget ? Math.round(festival.Avg_Movie_Budget / 1000000) + 'M' : 'N/A'}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

            } catch (error) {
                document.getElementById('movie-details-view').innerHTML = 
                document.getElementById('festival-statistics-view').innerHTML = `
                    <div class="error">Error loading views: ${error.message}</div>
                `;
            }
        }

        // Load audit logs
        async function loadAuditLogs() {
            try {
                const response = await fetch(`${API_BASE}/audit-logs`);
                const auditLogs = await response.json();
                
                const content = document.getElementById('audit-content');
                content.innerHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Action</th>
                                <th>Table</th>
                                <th>Record ID</th>
                                <th>Changed By</th>
                                <th>Old Values</th>
                                <th>New Values</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${auditLogs.map(log => `
                                <tr>
                                    <td>${new Date(log.Changed_At).toLocaleString()}</td>
                                    <td><span class="audit-action ${log.Action_Type}">${log.Action_Type}</span></td>
                                    <td>${log.Table_Name}</td>
                                    <td>${log.Record_ID}</td>
                                    <td>${log.Changed_By}</td>
                                    <td><pre>${log.Old_Values ? JSON.stringify(log.Old_Values, null, 2) : 'N/A'}</pre></td>
                                    <td><pre>${log.New_Values ? JSON.stringify(log.New_Values, null, 2) : 'N/A'}</pre></td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } catch (error) {
                document.getElementById('audit-content').innerHTML = `
                    <div class="error">Error loading audit logs: ${error.message}</div>
                `;
            }
        }

        // Load forms for adding data
        async function loadAddDataForms() {
            try {
                const movies = await fetch(`${API_BASE}/movies`).then(r => r.json());
                
                const movieSelect = document.getElementById('cast-movie');
                movieSelect.innerHTML = '<option value="">Select Movie</option>' +
                    movies.map(movie => `<option value="${movie.Movie_ID}">${movie.Title} (${movie.Release_Year})</option>`).join('');
                    
            } catch (error) {
                console.error('Error loading form data:', error);
            }
        }

        // Show detailed movie information
        async function showMovieDetails(movieId) {
            try {
                const response = await fetch(`${API_BASE}/movies/${movieId}/details`);
                const movieData = await response.json();
                const movie = movieData.movie;
                
                document.getElementById('movie-modal-content').innerHTML = `
                    <h2>${movie.Title}</h2>
                    <div style="margin:15px 0;">
                        <strong>Genre:</strong> ${movie.Genre} | 
                        <strong>Year:</strong> ${movie.Release_Year} | 
                        <strong>Duration:</strong> ${movie.Duration} min |
                        <strong>Status:</strong> ${movie.Status}
                    </div>
                    <div style="margin:15px 0;">
                        <strong>Budget:</strong> $${(movie.Budget / 1000000).toFixed(1)}M | 
                        <strong>Revenue:</strong> $${(movie.Revenue / 1000000).toFixed(1)}M |
                        <strong>ROI:</strong> <span class="${movie.ROI_Percentage >= 0 ? 'positive-roi' : 'negative-roi'}">
                            ${movie.ROI_Percentage ? movie.ROI_Percentage + '%' : 'N/A'}
                        </span>
                    </div>
                    <div style="margin:15px 0;">
                        <strong>Festival:</strong> ${movie.Festival_Name || 'N/A'} | 
                        <strong>Director:</strong> ${movie.Director_Name || 'N/A'}
                    </div>
                    
                    <h3>Cast (${movieData.cast.length})</h3>
                    <div>
                        ${movieData.cast.map(actor => `
                            <div class="cast-item ${actor.Is_Lead ? 'lead-role' : ''}" 
                                 style="display:block;margin:5px 0;padding:8px 12px;background:#ecf0f1;border-radius:5px;">
                                <strong>${actor.Actor_Name}</strong> as ${actor.Role}
                                ${actor.Is_Lead ? ' (Lead)' : ''}
                                <br><small>Salary: $${actor.Salary ? actor.Salary.toLocaleString() : 'N/A'} | ${actor.Gender}, ${actor.Nationality}</small>
                            </div>
                        `).join('')}
                    </div>
                    
                    <h3>Screenings (${movieData.screenings.length})</h3>
                    <div>
                        ${movieData.screenings.map(screening => `
                            <div class="screening-item" style="display:block;margin:5px 0;padding:8px 12px;background:#3498db;color:white;border-radius:5px;">
                                <strong>${screening.Venue_Name}</strong> in ${screening.City}<br>
                                ${new Date(screening.Screening_Date).toLocaleDateString()} at ${screening.Screening_Time}<br>
                                Tickets: ${screening.Tickets_Sold} | Revenue: $${screening.Screening_Revenue ? screening.Screening_Revenue.toLocaleString() : '0'}
                            </div>
                        `).join('')}
                    </div>
                    
                    <h3>Awards (${movieData.awards.length})</h3>
                    <div>
                        ${movieData.awards.map(award => `
                            <div class="award-item" style="display:block;margin:5px 0;padding:8px 12px;background:#f39c12;color:white;border-radius:5px;">
                                <strong>${award.Award_Name}</strong> - ${award.Category} (${award.Year})<br>
                                Prize: $${award.Prize_Money ? award.Prize_Money.toLocaleString() : 'N/A'}
                            </div>
                        `).join('')}
                    </div>
                `;
                
                document.getElementById('movieModal').style.display = 'block';
            } catch (error) {
                alert('Error loading movie details: ' + error.message);
            }
        }

        // Form handlers
        document.getElementById('add-movie-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                Title: document.getElementById('movie-title').value,
                Genre: document.getElementById('movie-genre').value,
                Release_Year: parseInt(document.getElementById('movie-year').value),
                Duration: parseInt(document.getElementById('movie-duration').value),
                Budget: parseFloat(document.getElementById('movie-budget').value) || 0,
                Revenue: 0,
                Festival_ID: null,
                Director_ID: null
            };
            
            try {
                const response = await fetch(`${API_BASE}/movies`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                alert('Movie added successfully! ID: ' + result.movieId);
                this.reset();
                loadMovies(); // Refresh the movies list
            } catch (error) {
                alert('Error adding movie: ' + error.message);
            }
        });

        document.getElementById('add-cast-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                Actor_ID: 1, // This would normally come from a proper actor selection
                Role: document.getElementById('actor-role').value,
                Is_Lead: document.getElementById('is-lead').checked,
                Salary: parseFloat(document.getElementById('actor-salary').value) || 0
            };
            
            const movieId = document.getElementById('cast-movie').value;
            
            try {
                const response = await fetch(`${API_BASE}/movies/${movieId}/cast`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                alert('Actor added to movie successfully!');
                this.reset();
            } catch (error) {
                alert('Error adding actor: ' + error.message);
            }
        });

        // Load initial data
        document.addEventListener('DOMContentLoaded', loadDashboard);
    </script>
</body>
</html>
